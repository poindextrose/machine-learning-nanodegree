import random
import math

import operator

from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator


class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5, decay_func=None):
        super(LearningAgent, self).__init__(env)  # Set the agent in the evironment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning  # Whether the agent is expected to learn
        self.Q = dict()  # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon  # Random exploration factor
        self.alpha = alpha  # Learning factor
        self.initial_epsilon = epsilon
        self.epsilon_linear_decay = 0.01
        self.decay_func = decay_func
        self.trial = 0

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        if testing:
            self.epsilon = self.alpha = 0
            return

        # Update epsilon using the provided decay function otherwise use a linear decay
        if self.decay_func:
            self.epsilon = self.decay_func(self.initial_epsilon, self.trial)
        else:
            self.epsilon -= self.epsilon_linear_decay
        self.trial += 1
        return None


    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint()  # The next waypoint
        inputs = self.env.sense(self)  # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        # Set 'state' as a tuple of relevant data for the agent
        return inputs['light'], inputs['left'], inputs['oncoming'], waypoint

    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """
        max_value = max(self.Q[state].iteritems(), key=operator.itemgetter(1))[1]
        max_actions = [key for key, value in self.Q[state].iteritems() if value == max_value]
        return random.sample(max_actions, 1)[0]

    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        if self.learning and state not in self.Q:
            Q_values = {}
            for action in self.env.valid_actions:
                Q_values[action] = 0
            self.Q[state] = Q_values
        return

    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()

        # When not learning, choose a random action
        if not self.learning:
            return random.sample(self.valid_actions, 1)[0]
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        if random.random() < self.epsilon:
            action = random.sample(self.env.valid_actions, 1)[0]
        else:
            action = self.get_maxQ(state)
        return action

    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        if self.learning:
            self.Q[state][action] += self.alpha * (reward - self.Q[state][action])
        return

    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()  # Get current state
        self.createQ(state)  # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action)  # Receive a reward
        self.learn(state, action, reward)  # Q-learn

        return


def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()

    tolerance = 0.0001
    total_trials = 500

    def linear_decay(epsilon, trial):
        """Linear decay of epsilon"""
        decay_rate = 1. / total_trials
        return epsilon - trial*decay_rate

    def step_decay(epsilon, trial):
        return 1 if trial < total_trials else 0

    def cos_decay(epsilon, trial):
        """Start decaying epsilon very slowly with cosine function. trial is 0-based index"""
        a = math.pi / 2 / (total_trials - 1)
        return epsilon * math.cos(a * trial)

    def exp_decay(epsilon, trial):
        """Exponential decay of epsilon"""
        # the final epsilon is reach when tolerance = e^(a * trials)
        # therefore ln(tolerance) = -at, so that
        # a = ln(tolerance) / trials where t is the total number of trials
        a = math.log(tolerance) / (total_trials - 1)
        return math.exp(a * trial)
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    #    * decay_func - epsilon decay function
    agent = env.create_agent(LearningAgent, learning=True, epsilon=1, alpha=0.1, decay_func=cos_decay)

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=0, log_metrics=True, optimized=True)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=40, tolerance=tolerance)


if __name__ == '__main__':
    run()
